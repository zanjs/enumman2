// Code generated by enumman. DO NOT EDIT.
package enum

import "errors"

var ErrInvalidOrderStatus = errors.New("invalid value is not a orderStatus")

type OrderStatusT int

// Private constants
const (
	_                        OrderStatusT = iota
	orderStatus_uncheck_v                 = 0
	orderStatus_unpaid_v                  = 10
	orderStatus_paid_v                    = 20
	orderStatus_processing_v              = 30
	orderStatus_ordered_v                 = 40
	orderStatus_cancelled_v               = 201
	orderStatus_invalid_v                 = 202
)

// Forward string lookup
var orderStatusStringMap = map[OrderStatusT]string{
	orderStatus_uncheck_v:    "Uncheck",
	orderStatus_unpaid_v:     "Unpaid",
	orderStatus_paid_v:       "Paid",
	orderStatus_processing_v: "Processing",
	orderStatus_ordered_v:    "Ordered",
	orderStatus_cancelled_v:  "Cancelled",
	orderStatus_invalid_v:    "Invalid",
}

// Reverse string lookup
var orderStatusReverseStringMap = map[string]OrderStatusT{
	"Uncheck":    orderStatus_uncheck_v,
	"Unpaid":     orderStatus_unpaid_v,
	"Paid":       orderStatus_paid_v,
	"Processing": orderStatus_processing_v,
	"Ordered":    orderStatus_ordered_v,
	"Cancelled":  orderStatus_cancelled_v,
	"Invalid":    orderStatus_invalid_v,
}

func orderStatusFromString(str string) (OrderStatusT, error) {
	v, ok := orderStatusReverseStringMap[str]
	if !ok {
		return 0, ErrInvalidOrderStatus
	}
	return v, nil
}

func mustOrderStatusFromString(str string) OrderStatusT {
	v, err := orderStatusFromString(str)
	if err != nil {
		panic("invalid orderStatus")
	}
	return v
}

func (v OrderStatusT) String() string {
	return orderStatusStringMap[v]
}

// Forward ordinal lookup
var orderStatusOrdinalMap = map[OrderStatusT]int{
	orderStatus_uncheck_v:    0,
	orderStatus_unpaid_v:     10,
	orderStatus_paid_v:       20,
	orderStatus_processing_v: 30,
	orderStatus_ordered_v:    40,
	orderStatus_cancelled_v:  201,
	orderStatus_invalid_v:    202,
}

// Reverse ordinal lookup
var orderStatusReverseOrdinalMap = map[int]OrderStatusT{
	0:   orderStatus_uncheck_v,
	10:  orderStatus_unpaid_v,
	20:  orderStatus_paid_v,
	30:  orderStatus_processing_v,
	40:  orderStatus_ordered_v,
	201: orderStatus_cancelled_v,
	202: orderStatus_invalid_v,
}

func orderStatusFromOrdinal(ord int) (OrderStatusT, error) {
	v, ok := orderStatusReverseOrdinalMap[ord]
	if !ok {
		return 0, ErrInvalidOrderStatus
	}
	return v, nil
}

func mustOrderStatusFromOrdinal(ord int) OrderStatusT {
	v, err := orderStatusFromOrdinal(ord)
	if err != nil {
		panic("invalid orderStatus")
	}
	return v
}

func (v OrderStatusT) Ordinal() int {
	return orderStatusOrdinalMap[v]
}

var orderStatusCount = 7

var orderStatusValues = []OrderStatusT{
	orderStatus_uncheck_v,
	orderStatus_unpaid_v,
	orderStatus_paid_v,
	orderStatus_processing_v,
	orderStatus_ordered_v,
	orderStatus_cancelled_v,
	orderStatus_invalid_v,
}

var orderStatusDescriptMap = map[OrderStatusT]string{
	orderStatus_uncheck_v:    "采购待审核",
	orderStatus_unpaid_v:     "未支付",
	orderStatus_paid_v:       "已付款",
	orderStatus_processing_v: "已采购",
	orderStatus_ordered_v:    "卖家已邮寄",
	orderStatus_cancelled_v:  "已取消",
	orderStatus_invalid_v:    "无效单",
}

var orderStatusReverseDescriptMap = map[string]OrderStatusT{
	"采购待审核": orderStatus_uncheck_v,
	"未支付":   orderStatus_unpaid_v,
	"已付款":   orderStatus_paid_v,
	"已采购":   orderStatus_processing_v,
	"卖家已邮寄": orderStatus_ordered_v,
	"已取消":   orderStatus_cancelled_v,
	"无效单":   orderStatus_invalid_v,
}

func orderStatusFromDescript(str string) (OrderStatusT, error) {
	v, ok := orderStatusReverseDescriptMap[str]
	if !ok {
		return 0, ErrInvalidOrderStatus
	}
	return v, nil
}

func mustOrderStatusFromDescript(str string) OrderStatusT {
	v, err := orderStatusFromDescript(str)
	if err != nil {
		panic("invalid orderStatus")
	}
	return v
}

func (v OrderStatusT) Descript() string {
	return orderStatusDescriptMap[v]
}

type orderStatus struct {
	Count int

	Values []OrderStatusT

	Descript map[OrderStatusT]string

	Uncheck    OrderStatusT
	Unpaid     OrderStatusT
	Paid       OrderStatusT
	Processing OrderStatusT
	Ordered    OrderStatusT
	Cancelled  OrderStatusT
	Invalid    OrderStatusT

	FromString     func(string) (OrderStatusT, error)
	MustFromString func(string) OrderStatusT

	FromOrdinal     func(int) (OrderStatusT, error)
	MustFromOrdinal func(int) OrderStatusT

	FromDescript     func(string) (OrderStatusT, error)
	MustFromDescript func(string) OrderStatusT
}

var OrderStatus = orderStatus{
	Count: orderStatusCount,

	Values: orderStatusValues,

	Descript: orderStatusDescriptMap,

	Uncheck:    orderStatus_uncheck_v,
	Unpaid:     orderStatus_unpaid_v,
	Paid:       orderStatus_paid_v,
	Processing: orderStatus_processing_v,
	Ordered:    orderStatus_ordered_v,
	Cancelled:  orderStatus_cancelled_v,
	Invalid:    orderStatus_invalid_v,

	FromString:     orderStatusFromString,
	MustFromString: mustOrderStatusFromString,

	FromOrdinal:     orderStatusFromOrdinal,
	MustFromOrdinal: mustOrderStatusFromOrdinal,

	FromDescript:     orderStatusFromDescript,
	MustFromDescript: mustOrderStatusFromDescript,
}
